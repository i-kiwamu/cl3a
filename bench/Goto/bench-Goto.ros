#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#


#+sbcl (sb-posix:chdir "../../")
(ql:quickload "cl3a" :silent t)
#+sbcl (sb-posix:chdir "./bench/Goto")


(defun run-bench (mc kc n)
  (declare (type fixnum mc kc n))
  (let ((A (make-array (list n n)
                       :element-type 'double-float))
        (B (make-array (list n n)
                       :element-type 'double-float))
        (C (make-array (list n n)
                       :element-type 'double-float))
        (real-time-before-run 0)
        (real-time-after-run 0))
    (declare (type (simple-array double-float (* *)) A B C)
             (type fixnum real-time-before-run real-time-after-run))
    (dotimes (i n)
      (dotimes (j n)
        (setf (aref A i j) (random 1d0))
        (setf (aref B i j) (random 1d0))))
    (setf real-time-before-run (get-internal-real-time))
    (cl3a:gemm1 mc kc 4 4 A B C)
    (setf real-time-after-run (get-internal-real-time))
    (- real-time-after-run real-time-before-run)))
    


(defun main (output-file n-str &rest argv)
  (declare (ignorable argv))
  (let ((n (parse-integer n-str)))
    (declare (type fixnum n))
    (with-open-file (output output-file :direction :output)
      (do ((mc 8 (1+ mc)))
          ((>= mc 2000))
        (do ((kc 8 (1+ kc)))
            ((>= kc 2000))
          (let ((run-time (run-bench mc kc n)))
            (format output "~A, ~A, ~A~%" mc kc run-time)))))))
