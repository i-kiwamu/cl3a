#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#


#+sbcl (sb-posix:chdir "../../")
(ql:quickload "cl3a" :silent t)
#+sbcl (sb-posix:chdir "./bench/Goto")


;; (defun run-bench (nr mr n A B C)
;;   (declare (type fixnum nr mr n)
;;            (type (simple-array double-float (* *)) A B C))
;; (defun run-bench (mc kc n A B C)
;;   (declare (type fixnum mc kc n)
;;            (type (simple-array double-float (* *)) A B C))
(defun run-bench (A B C)
  (declare ;; (type fixnum n)
           (type (simple-array double-float (* *)) A B C))
  ;; (let ((real-time-before-run 0)
  ;;       (real-time-after-run 0))
  ;;   (declare (type fixnum real-time-before-run real-time-after-run))
  ;;   (setf real-time-before-run (get-internal-real-time))
    ;; ;; test for mc & kc
    ;; (dotimes (i 5)
    ;;   (cl3a:gemm1 mc kc 8 16 A B C))
    ;; ;; test for nr & mr
    ;; (dotimes (i 500)
    ;;   (cl3a:gemm1 512 256 nr mr A B C))
    ;; (setf real-time-after-run (get-internal-real-time))
    ;; (dotimes (i n)
    ;;   (dotimes (j n)
    ;;     (setf (aref C i j) 0d0)))
    ;; (- real-time-after-run real-time-before-run)))
    (time (cl3a:dm*m A B C)))


;; (defun main (output-file n-str &rest argv)
(defun main (n-str &rest argv)
  (declare (ignorable argv))
  (let ((n (parse-integer n-str)))
    (declare (type fixnum n))
    ;; (with-open-file (output output-file :direction :output)
      (let ((A (make-array (list n n)
                           :element-type 'double-float))
            (B (make-array (list n n)
                           :element-type 'double-float))
            (C (make-array (list n n)
                           :element-type 'double-float)))
        (declare (type (simple-array double-float (* *)) A B C))
        (dotimes (i n)
          (dotimes (j n)
            (setf (aref A i j) (random 1d0))
            (setf (aref B i j) (random 1d0))))
        ;; ;; test for mc & kc
        ;; ;; (do ((mc 64 (+ mc 8)))
        ;; ;;     ((>= mc 512))
        ;;   (do ((kc 512 (+ kc 32)))
        ;;       ((>= kc n))
        ;;   ;;   (let ((run-time (run-bench mc kc n A B C)))
        ;;   ;;     (format output "~A, ~A, ~A~%" mc kc run-time))))))))
        ;;   (let ((run-time (run-bench 128 kc n A B C)))
        ;;     (format output "~A, ~A, ~A~%" 128 kc run-time)))))))
        ;; ;; test for nr & mr
        ;; (do ((nr 2 (1+ nr)))
        ;;     ((>= nr 32))
        ;;   (do ((mr 2 (1+ mr)))
        ;;       ((>= mr 32))
        ;;     (let ((run-time (run-bench nr mr n A B C)))
        ;;       (format output "~A, ~A, ~A~%" nr mr run-time)))))))
        ;; normal test
        (run-bench A B C))))
