(in-package :cl-user)
(defpackage cl3a.add-vector
  (:use :cl :alexandria :cl3a.utilities :cl3a.utilities_vop)
  (:export :dv+v))
(in-package :cl3a.add-vector)


(declaim (ftype (function (double-float (simple-array double-float (*))
                           double-float (simple-array double-float (*))
                           (simple-array double-float (*))))
                dv+v))
(defun dv+v (a va b vb vc)
  "Add two double-float vectors va and vb"
  (declare (optimize (speed 3) (safety 0))
           (type double-float a b)
           (type (simple-array double-float (*)) va vb vc))
  (let* ((na (length va))
         (nb (length vb))
         (nv (cond ((/= na nb) (different-length-warn na nb)
                               (min na nb))
                   (t na)))
         (nv0 (min-factor nv 4)))
    (declare (type fixnum na nb nv nv0))
    (do ((i 0 (+ i 4)))
        ((>= i nv0))
      (sb-sys:%primitive
       aset4-pd vc i
                (f4+-pd (f4*-sd a (aref4-pd va i))
                        (f4*-sd b (aref4-pd vb i)))))
    (do ((i nv0 (1+ i)))
        ((>= i nv))
      (setf (aref vc i)
            (+ (* a (aref va i))
               (* b (aref vb i)))))))


(declaim (ftype (function (single-float (simple-array single-float (*))
                           single-float (simple-array single-float (*))
                           (simple-array single-float (*))))
                sv+v))
(defun sv+v (a va b vb vc)
  "Add two single-float vectors va and vb"
  (declare (optimize (speed 3) (safety 0))
           (type single-float a b)
           (type (simple-array single-float (*)) va vb vc))
  (let* ((na (length va))
         (nb (length vb))
         (nv (cond ((/= na nb) (different-length-warn na nb)
                               (min na nb))
                   (t na)))
         (nv0 (min-factor nv 8)))
    (declare (type fixnum na nb nv nv0))
    (do ((i 0 (+ i 4)))
        ((>= i nv0))
      (sb-sys:%primitive
       aset8-ps vc i
                (f8+-ps (f8*-ss a (aref8-ps va i))
                        (f8*-ss b (aref8-ps vb i)))))
    (do ((i nv0 (1+ i)))
        ((>= i nv))
      (setf (aref vc i)
            (+ (* a (aref va i))
               (* b (aref vb i)))))))
