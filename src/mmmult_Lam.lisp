(in-package :cl-user)
(defpackage cl3a.mmmult_Lam
  (:use :cl :alexandria :cl3a.utilities)
  (:export :dm*m))
(in-package :cl3a.mmmult_Lam)


(declaim (ftype (function ((simple-array double-float (* *))
                           fixnum fixnum fixnum fixnum)
                          (simple-array double-float (* *)))
                sub-matrix))
(defun sub-matrix (ma si ni sj nj)
  "copy ma ni rows from si and nj cols from sj into mb"
  (declare (type (simple-array double-float (* *)) ma)
           (type fixnum si ni sj nj))
  (let* ((nra (array-dimension ma 0))
         (nca (array-dimension ma 1))
         (nr (min nra ni))
         (nc (min nca nj))
         (mb (make-array (list nr nc) :element-type 'double-float)))
    (declare (type fixnum nra nca nr nc)
             (type (simple-array double-float (* *)) mb))
    (do ((i 0 (1+ i)))
        ((>= i nr) mb)
      (let ((rma (array-row-major-index ma (+ i si) sj))
            (rmb (array-row-major-index mb i 0)))
        (declare (type fixnum rma rmb))
        (dotimes (j nc)
          (setf (row-major-aref mb rmb)
                (row-major-aref ma rma))
          (incf rma)
          (incf rmb))))))


(declaim (ftype (function (fixnum
                           (simple-array double-float (* *))
                           (simple-array double-float (* *))
                           (simple-array double-float (* *))))
                dm*m))
(defun dm*m (b ma mb mc)
  (declare (type fixnum b)
           (type (simple-array double-float (* *)) ma mb mc))
  ; (dm*m-kk-jj-i-k-j b ma mb mc))
  (dm*m-ii-kk-i-k-j b ma mb mc))
  ; (dm*m-jj-ii-i-k-j b ma mb mc))
  ; (dm*m-ii-jj-i-k-j b ma mb mc))



(declaim (ftype (function (fixnum
                           (simple-array double-float (* *))
                           (simple-array double-float (* *))
                           (simple-array double-float (* *))))
                dm*m-kk-jj-i-j-k))
(defun dm*m-kk-jj-i-k-j (b ma mb mc)
  (declare (type fixnum b)
           (type (simple-array double-float (* *)) ma mb mc))
  (let ((n (array-dimension ma 0)))
    (declare (type fixnum n))
    (dotimes-interval2 (kk 0 n) (bk b)
      (let ((pk (min (1- (+ kk bk)) n)))
        (declare (type fixnum pk))
        (dotimes-interval2 (jj 0 n) (bj b)
          (let ((pj (min (1- (+ jj bj)) n)))
            (declare (type fixnum pj))
            (dotimes (i n)
              (do ((k kk (1+ k)))
                  ((> k pk))
                (let ((maik (aref ma i k)))
                  (declare (type double-float maik))
                  (do ((j jj (1+ j)))
                      ((> j pj))
                    ; (format t "(i,j,k) = (~A,~A,~A)~%" i j k)
                    (incf (aref mc i j)
                          (* maik (aref mb k j)))))))))))))


(declaim (ftype (function (fixnum
                           (simple-array double-float (* *))
                           (simple-array double-float (* *))
                           (simple-array double-float (* *))))
                dm*m-ii-kk-i-j-k))
(defun dm*m-ii-kk-i-k-j (b ma mb mc)
  (declare (type fixnum b)
           (type (simple-array double-float (* *)) ma mb mc))
  (let ((n (array-dimension ma 0)))
    (declare (type fixnum n))
    (dotimes-interval2 (ii 0 n) (bi b)
      (let ((pii (min (1- (+ ii bi)) n)))
        (declare (type fixnum pii))
        (dotimes-interval2 (kk 0 n) (bk b)
          (let ((pk (min (1- (+ kk bk)) n)))
            (declare (type fixnum pk))
            (do ((i ii (1+ i)))
                ((> i pii))
              (do ((k kk (1+ k)))
                  ((> k pk))
                (let ((maik (aref ma i k)))
                  (declare (type double-float maik))
                  (dotimes (j n)
                    (incf (aref mc i j)
                          (* maik (aref mb k j)))))))))))))


(declaim (ftype (function (fixnum
                           (simple-array double-float (* *))
                           (simple-array double-float (* *))
                           (simple-array double-float (* *))))
                dm*m-ii-kk-i-j-k))
(defun dm*m-jj-ii-i-k-j (b ma mb mc)
  (declare (type fixnum b)
           (type (simple-array double-float (* *)) ma mb mc))
  (let ((n (array-dimension ma 0)))
    (declare (type fixnum n))
    (dotimes-interval2 (jj 0 n) (bj b)
      (let ((pj (min (1- (+ jj bj)) n)))
        (declare (type fixnum pj))
        (dotimes-interval2 (ii 0 n) (bi b)
          (let ((pii (min (1- (+ ii bi)) n)))
            (declare (type fixnum pii))
            (do ((i ii (1+ i)))
                ((> i pii))
              (dotimes (k n)
                (let ((maik (aref ma i k)))
                  (declare (type double-float maik))
                  (do ((j jj (1+ j)))
                      ((> j pj))
                    (incf (aref mc i j)
                          (* maik (aref mb k j)))))))))))))


(declaim (ftype (function (fixnum
                           (simple-array double-float (* *))
                           (simple-array double-float (* *))
                           (simple-array double-float (* *))))
                dm*m-ii-kk-i-j-k))
(defun dm*m-ii-jj-i-k-j (b ma mb mc)
  (declare (type fixnum b)
           (type (simple-array double-float (* *)) ma mb mc))
  (let ((n (array-dimension ma 0)))
    (declare (type fixnum n))
    (dotimes-interval2 (ii 0 n) (bi b)
      (let ((pii (min (1- (+ ii bi)) n)))
        (declare (type fixnum pii))
        (dotimes-interval2 (jj 0 n) (bj b)
          (let ((pj (min (1- (+ jj bj)) n)))
            (declare (type fixnum pj))
            (do ((i ii (1+ i)))
                ((> i pii))
              (dotimes (k n)
                (let ((maik (aref ma i k)))
                  (declare (type double-float maik))
                  (do ((j jj (1+ j)))
                      ((> j pj))
                    (incf (aref mc i j)
                          (* maik (aref mb k j)))))))))))))
