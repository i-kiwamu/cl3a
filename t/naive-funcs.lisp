(in-package :cl-user)
(defpackage naive-funcs
  (:use :cl :prove :cl3a :cl-slice)
  (:nicknames naive)
  (:export :dv*v
           :dnorm
           :dv+v
           :drotate
           :dm*v))
(in-package #:naive-funcs)


(declaim (ftype (function ((simple-array double-float (*))
                           (simple-array double-float (*)))
                          double-float)
                dv*v))
(defun dv*v (va vb)
  (declare (type (simple-array double-float (*)) va vb))
  (let ((nv (min (length va) (length vb)))
        (res 0d0))
    (declare (type fixnum nv))
    (dotimes (i nv res)
      (incf res (* (aref va i) (aref vb i))))))


(declaim (ftype (function ((simple-array double-float (*)))
                          double-float)
                dnorm))
(defun dnorm (va)
  (declare (type (simple-array double-float (*)) va))
  (sqrt (dv*v va va)))


(declaim (ftype (function (double-float (simple-array double-float (*))
                           double-float (simple-array double-float (*)))
                          (simple-array double-float (*)))
                dv+v))
(defun dv+v (a va b vb)
  (declare (type (simple-array double-float (*)) va vb)
           (type double-float a b))
  (let* ((nv (min (length va) (length vb)))
         (res (make-array (list nv) :element-type 'double-float)))
    (dotimes (i nv)
      (setf (aref res i) (+ (* a (aref va i))
                            (* b (aref vb i)))))
    res))


(declaim (ftype (function ((simple-array double-float (*))
                           (simple-array double-float (*))
                           (double-float -1d0 1d0) (double-float -1d0 1d0))
                          (values (simple-array double-float (*))
                                  (simple-array double-float (*))))
                drotate))
(defun drotate (va vb c s)
  (declare (type (simple-array double-float (*)) va vb)
           (type (double-float -1d0 1d0) c s))
  (let* ((nv (min (length va) (length vb)))
         (vc (make-array (list nv) :element-type 'double-float))
         (vd (make-array (list nv) :element-type 'double-float)))
    (declare (type fixnum nv)
             (type (simple-array double-float (*)) vc vd))
    (dotimes (i nv)
      (setf (aref vc i) (+ (* c (aref va i))
                           (* s (aref vb i))))
      (setf (aref vd i) (- (* c (aref vb i))
                           (* s (aref va i)))))
    (values vc vd)))


(declaim (ftype (function ((simple-array double-float (* *))
                           (simple-array double-float (*)))
                          (simple-array double-float (*)))
                dm*v))
(defun dm*v (ma vb)
  (declare (type (simple-array double-float (* *)) ma)
           (type (simple-array double-float (*)) vb))
  (let* ((nr (array-dimension ma 0))
         (res (make-array (list nr) :element-type 'double-float)))
    (dotimes (i nr)
      (let ((va (slice ma i t)))
        (declare (type (simple-array double-float (*)) va))
        (setf (aref res i) (dv*v va vb))))
    res))
